/*
 * Copyright (c) 2017, Linaro Limited and Contributors. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of Linaro nor the names of its contributors may be used
 * to endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef __HI3660_H__
#define __HI3660_H__

#include <hi3660_crg.h>
#include <hi3660_hkadc.h>

#define ASP_CFG_REG_BASE		0xE804E000

#define ASP_CFG_MMBUF_CTRL_OFFSET	0x148

#define LP_RAM_BASE 			0xFFF50000

#define SCTRL_REG_BASE 			0xFFF0A000

#define SCTRL_CONTROL_OFFSET 		0x000
#define SCTRL_CONTROL_SYS_MODE(x) 	(((x) & 0xf) << 3)
#define SCTRL_CONTROL_SYS_MODE_NORMAL 	((1 << 2) << 3)
#define SCTRL_CONTROL_SYS_MODE_SLOW 	((1 << 1) << 3)
#define SCTRL_CONTROL_SYS_MODE_MASK 	(0xf << 3)
#define SCTRL_CONTROL_MODE_CTRL_NORMAL 	(1 << 2)
#define SCTRL_CONTROL_MODE_CTRL_SLOW 	(1 << 1)
#define SCTRL_CONTROL_MODE_CTRL_MASK 	0x7

#define SCTRL_SCSYSSTAT_REG		(0x004)

#define SCTRL_DEEPSLEEPED_OFFSET 	0x008
#define SCTRL_EFUSE_USB_MASK 		(1 << 30)
#define SCTRL_EFUSE_USB_PLL 		(1 << 30)
#define SCTRL_EFUSE_USB_ABB 		(0 << 30)
#define SCTRL_EFUSE_UFS_MASK 		(3 << 6)
#define SCTRL_EFUSE_UFS_PLL 		(1 << 6)
#define SCTRL_EFUSE_UFS_ABB 		(0 << 6)

#define SCTRL_SCISOEN_OFFSET 		0x040
#define SCTRL_SCISODIS_OFFSET 		0x044
#define SCISO_MMBUFISO 			(1 << 3)

#define SCTRL_SCPWREN_OFFSET 		0x060
#define SCPWREN_MMBUFPWREN 		(1 << 3)

#define SCTRL_PLL_CTRL0_OFFSET 		0x100
#define SCTRL_PLL0_POSTDIV2(x) 		(((x) & 0x7) << 23)
#define SCTRL_PLL0_POSTDIV1(x) 		(((x) & 0x7) << 20)
#define SCTRL_PLL0_FBDIV(x) 		(((x) & 0xfff) << 8)
#define SCTRL_PLL0_REFDIV(x) 		(((x) & 0x3f) << 2)
#define SCTRL_PLL0_EN 			(1 << 0)

#define SCTRL_PLL_CTRL1_OFFSET 		0x104
#define SCTRL_PLL0_CLK_NO_GATE 		(1 << 26)
#define SCTRL_PLL0_CFG_VLD 		(1 << 25)
#define SCTRL_PLL0_FRACDIV(x) 		((x) & 0xFFFFFF)

#define SCTRL_PLL_STAT_OFFSET 		0x10C
#define SCTRL_PLL0_STAT 		(1 << 0)

#define SCTRL_SCPEREN0_OFFSET 		0x160
#define SCTRL_SCPERDIS0_OFFSET 		0x164
#define SCTRL_SCPERSTAT0_OFFSET 	0x168

#define SCTRL_SCPEREN1_REG		(0x170)
#define SCTRL_SCPERDIS1_REG		(0x174)
#define SCTRL_SCPEREN1_OFFSET 		0x170
#define SCTRL_SCPERDIS1_OFFSET 		0x174
#define SCPEREN1_WAIT_DDR_SELFREFRESH_DONE_BYPASS	(1 << 31)
#define SCPEREN_GT_PCLK_MMBUFCFG 	(1 << 25)
#define SCPEREN_GT_PCLK_MMBUF 		(1 << 23)
#define SCPEREN_GT_ACLK_MMBUF 		(1 << 22)
#define SCPEREN_GT_CLK_NOC_AOBUS2MMBUF 	(1 << 6)

#define SCTRL_SCPEREN2_OFFSET		0x190
#define SCTRL_SCPERDIS2_OFFSET		0x194
#define SCTRL_SCPERSTAT2_OFFSET		0x198
#define SCTRL_SCPERRSTEN0_OFFSET	0x200
#define SCTRL_SCPERRSTDIS0_OFFSET	0x204
#define SCTRL_SCPERRSTSTAT0_OFFSET	0x208
#define SCTRL_SCPERRSTEN1_OFFSET 	0x20C
#define SCTRL_SCPERRSTDIS1_OFFSET 	0x210
#define SCTRL_SCPERRSTSTAT1_OFFSET 	0x214
#define IP_RST_MMBUFCFG 		(1 << 12)
#define IP_RST_MMBUF 			(1 << 11)

#define SCTRL_SCPERRSTEN2_OFFSET 	0x218
#define SCTRL_SCPERRSTDIS2_OFFSET 	0x21C
#define SCTRL_SCPERRSTSTAT2_OFFSET 	0x220

#define SCTRL_SCCLKDIV2_OFFSET 		0x258
#define SEL_CLK_MMBUF_MASK 		(0x3 << 8)
#define SEL_CLK_MMBUF_PLL0 		(0x3 << 8)
#define SCCLKDIV2_GT_PCLK_MMBUF 	(1 << 7)

#define SCTRL_SCCLKDIV4_OFFSET 		0x260
#define GT_MMBUF_SYS 			(1 << 13)
#define GT_MMBUF_FLL 			(1 << 12)
#define GT_PLL_CLK_MMBUF 		(1 << 11)

#define SCTRL_SCCLKDIV6_OFFSET		0x268

#define SCTRL_SCPERCTRL7_OFFSET		0x31C
#define SCTRL_SCPERSTAT6_OFFSET		0x378

#define SCTRL_SCINNERSTAT 		0x3A0
#define EMMC_UFS_SEL 			(1 << 15)

#define SCTRL_BAK_DATA0_OFFSET 		0x40C
#define SCTRL_BAK_DATA4_OFFSET		0x41C

#define SCTRL_LPMCU_CLKEN_OFFSET 	0x480
#define SCTRL_LPMCU_CLKDIS_OFFSET 	0x484
#define SCTRL_LPMCU_RSTEN_OFFSET 	0x500
#define SCTRL_LPMCU_RSTDIS_OFFSET 	0x504
#define DDRC_SOFT_BIT 			(1 << 6)
#define DDRC_CLK_BIT 			(1 << 5)

#define SCTRL_SCPEREN0_SEC_OFFSET 	0x900
#define SCTRL_SCPERDIS0_SEC_OFFSET 	0x904
#define MMBUF_SEC_CTRL_MASK 		(0xfff << 20)
#define MMBUF_SEC_CTRL(x) 		(((x) & 0xfff) << 20)

#define SCTRL_PERRSTEN1_SEC_OFFSET 	0xA50
#define SCTRL_PERRSTDIS1_SEC_OFFSET 	0xA54
#define SCTRL_PERRSTSTAT1_SEC_OFFSET 	0xA58
#define RST_ASP_SUBSYS_BIT 		(1 << 0)

#define SCTRL_PERRSTEN2_SEC_OFFSET 	0xB50
#define SCTRL_PERRSTDIS2_SEC_OFFSET 	0xB54
#define SCTRL_PERRSTSTAT2_SEC_OFFSET 	0xB58

#define SCTRL_HISEECLKDIV_OFFSET 	0xC28
#define SC_SEL_HISEE_PLL_MASK 		(1 << 4)
#define SC_SEL_HISEE_PLL0 		(1 << 4)
#define SC_SEL_HISEE_PLL2 		(0 << 4)
#define SC_DIV_HISEE_PLL_MASK 		(7 << 16)
#define SC_DIV_HISEE_PLL(x) 		((x) & 0x7)

#define SCTRL_SCSOCID0			0xE00

#define PMC_REG_BASE 			0xFFF31000
#define PMC_PPLL1_CTRL0_OFFSET 		0x038
#define PMC_PPLL1_CTRL1_OFFSET 		0x03C
#define PMC_PPLL2_CTRL0_OFFSET 		0x040
#define PMC_PPLL2_CTRL1_OFFSET 		0x044
#define PMC_PPLL3_CTRL0_OFFSET 		0x048
#define PMC_PPLL3_CTRL1_OFFSET 		0x04C
#define PPLLx_LOCK 			(1 << 26)
#define PPLLx_WITHOUT_CLK_GATE 		(1 << 26)
#define PPLLx_CFG_VLD 			(1 << 25)
#define PPLLx_INT_MOD 			(1 << 24)
#define PPLLx_POSTDIV2_MASK 		(0x7 << 23)
#define PPLLx_POSTDIV2(x) 		(((x) & 0x7) << 23)
#define PPLLx_POSTDIV1_MASK 		(0x7 << 20)
#define PPLLx_POSTDIV1(x) 		(((x) & 0x7) << 20)
#define PPLLx_FRACDIV_MASK 		(0x00FFFFFF)
#define PPLLx_FRACDIV(x) 		((x) & 0x00FFFFFF)
#define PPLLx_FBDIV_MASK 		(0xfff << 8)
#define PPLLx_FBDIV(x) 			(((x) & 0xfff) << 8)
#define PPLLx_REFDIV_MASK 		(0x3f << 2)
#define PPLLx_REFDIV(x) 		(((x) & 0x3f) << 2)
#define PPLLx_BP 			(1 << 1)
#define PPLLx_EN 			(1 << 0)

#define PMC_DDRLP_CTRL_OFFSET 		0x30C
#define DDRC_CSYSREQ_CFG(x) 		((x) & 0xF)

#define PMC_NOC_POWER_IDLEREQ_OFFSET 	0x380
#define PMC_NOC_POWER_IDLEREQ_IVP	(1 << 14)
#define PMC_NOC_POWER_IDLEREQ_DSS	(1 << 13)
#define PMC_NOC_POWER_IDLEREQ_VENC	(1 << 11)
#define PMC_NOC_POWER_IDLEREQ_VDEC	(1 << 10)
#define PMC_NOC_POWER_IDLEREQ_ISP	(1 << 5)
#define PMC_NOC_POWER_IDLEREQ_VCODEC	(1 << 4)
#define DDRPHY_BYPASS_MODE 		(1 << 0)

#define PMC_NOC_POWER_IDLEACK_OFFSET	0x384
#define PMC_NOC_POWER_IDLE_OFFSET	0x388

#define PMU_SSI0_REG_BASE 		0xFFF34000

#define PMU_SSI0_LDO8_CTRL0_OFFSET 	(0x68 << 2)
#define LDO8_CTRL0_EN_1_8V 		0x02

#define PMU_SSI0_CLK_TOP_CTRL7_OFFSET 	(0x10C << 2)
#define NP_XO_ABB_DIG 			(1 << 1)

#define LP_CONFIG_REG_BASE 		0xFFF3F000

#define DMAC_BASE			0xFDF30000

#define CCI400_REG_BASE			0xE8100000
#define CCI400_SL_IFACE3_CLUSTER_IX	0
#define CCI400_SL_IFACE4_CLUSTER_IX	1

#define GICD_REG_BASE			0xE82B1000
#define GICC_REG_BASE			0xE82B2000
/*
 * GIC400 interrupt handling related constants
 */
#define IRQ_SEC_PHY_TIMER		29
#define IRQ_SEC_SGI_0			8
#define IRQ_SEC_SGI_1			9
#define IRQ_SEC_SGI_2			10
#define IRQ_SEC_SGI_3			11
#define IRQ_SEC_SGI_4			12
#define IRQ_SEC_SGI_5			13
#define IRQ_SEC_SGI_6			14
#define IRQ_SEC_SGI_7			15
#define IRQ_SEC_SGI_8			16

#define IPC_REG_BASE			0xE896A000
#define IPC_BASE			(IPC_REG_BASE)

#define IOMG_REG_BASE 			0xE896C000

/* GPIO46: HUB 3.3V enable. active low */
#define IOMG_044_REG			(0x0B0)
#define IOMG_UART5_RX_OFFSET 		0x0BC
#define IOMG_UART5_TX_OFFSET 		0x0C0

#define IOCG_REG_BASE			0xE896C800

/* GPIO005: PMIC SSI. (2 << 4) */
#define IOCG_006_REG			(0x018)

#define TIMER9_REG_BASE 		0xE8A00000

#define WDT0_REG_BASE			0xE8A06000
#define WDT1_REG_BASE			0xE8A07000
#define WDT_CONTROL_OFFSET		0x008
#define WDT_LOCK_OFFSET			0xC00

#define WDT_UNLOCK			0x1ACCE551
#define WDT_LOCKED			1

#define PCTRL_REG_BASE 			0xE8A09000
#define PCTRL_PERI_CTRL3_OFFSET		0x010
#define PCTRL_PERI_CTRL24_OFFSET 	0x064

#define TZC_REG_BASE			0xE8A21000
#define TZC_STAT0_OFFSET		0x800
#define TZC_EN0_OFFSET			0x804
#define TZC_DIS0_OFFSET			0x808
#define TZC_STAT1_OFFSET		0x80C
#define TZC_EN1_OFFSET			0x810
#define TZC_DIS1_OFFSET			0x814
#define TZC_STAT2_OFFSET		0x818
#define TZC_EN2_OFFSET			0x81C
#define TZC_DIS2_OFFSET			0x820
#define TZC_STAT3_OFFSET		0x824
#define TZC_EN3_OFFSET			0x828
#define TZC_DIS3_OFFSET			0x82C
#define TZC_STAT4_OFFSET		0x830
#define TZC_EN4_OFFSET			0x834
#define TZC_DIS4_OFFSET			0x838
#define TZC_STAT5_OFFSET		0x83C
#define TZC_EN5_OFFSET			0x840
#define TZC_DIS5_OFFSET			0x844
#define TZC_STAT6_OFFSET		0x848
#define TZC_EN6_OFFSET			0x84C
#define TZC_DIS6_OFFSET			0x850
#define TZC_STAT7_OFFSET		0x854
#define TZC_EN7_OFFSET			0x858
#define TZC_DIS7_OFFSET			0x85C
#define TZC_STAT8_OFFSET		0x860
#define TZC_EN8_OFFSET			0x864
#define TZC_DIS8_OFFSET			0x868

#define MMBUF_BASE 			0xEA800000

#define ACPU_DMCPACK0_BASE		0xEA900000

#define ACPU_DMCPACK1_BASE		0xEA920000

#define ACPU_DMCPACK2_BASE		0xEA940000

#define ACPU_DMCPACK3_BASE		0xEA960000

#define UART5_REG_BASE 			0xFDF05000

#define USB3OTG_REG_BASE 		0xFF100000

#define UFS_REG_BASE 			0xFF3B0000

#define UFS_SYS_REG_BASE 		0xFF3B1000

#define UFS_SYS_PSW_POWER_CTRL_OFFSET		0x004
#define UFS_SYS_PHY_ISO_EN_OFFSET		0x008
#define UFS_SYS_HC_LP_CTRL_OFFSET		0x00C
#define UFS_SYS_PHY_CLK_CTRL_OFFSET		0x010
#define UFS_SYS_PSW_CLK_CTRL_OFFSET		0x014
#define UFS_SYS_CLOCK_GATE_BYPASS_OFFSET	0x018
#define UFS_SYS_RESET_CTRL_EN_OFFSET		0x01C
#define UFS_SYS_MONITOR_HH_OFFSET		0x03C
#define UFS_SYS_UFS_SYSCTRL_OFFSET		0x05C
#define UFS_SYS_UFS_DEVICE_RESET_CTRL_OFFSET	0x060
#define UFS_SYS_UFS_APB_ADDR_MASK_OFFSET	0x064

#define BIT_UFS_PSW_ISO_CTRL			(1 << 16)
#define BIT_UFS_PSW_MTCMOS_EN			(1 << 0)
#define BIT_UFS_REFCLK_ISO_EN			(1 << 16)
#define BIT_UFS_PHY_ISO_CTRL			(1 << 0)
#define BIT_SYSCTRL_LP_ISOL_EN			(1 << 16)
#define BIT_SYSCTRL_PWR_READY			(1 << 8)
#define BIT_SYSCTRL_REF_CLOCK_EN		(1 << 24)
#define MASK_SYSCTRL_REF_CLOCK_SEL		(3 << 8)
#define MASK_SYSCTRL_CFG_CLOCK_FREQ		(0xFF)
#define BIT_SYSCTRL_PSW_CLK_EN			(1 << 4)
#define MASK_UFS_CLK_GATE_BYPASS		(0x3F)
#define BIT_SYSCTRL_LP_RESET_N			(1 << 0)
#define BIT_UFS_REFCLK_SRC_SE1			(1 << 0)
#define MASK_UFS_SYSCTRL_BYPASS			(0x3F << 16)
#define MASK_UFS_DEVICE_RESET			(1 << 16)
#define BIT_UFS_DEVICE_RESET			(1 << 0)

#define IOMG_FIX_REG_BASE		0xFF3B6000

/* GPIO150: LED */
#define IOMG_FIX_006_REG		(0x018)
/* GPIO151: LED */
#define IOMG_FIX_007_REG		(0x01C)

#define IOMG_AO_REG_BASE		0xFFF11000

/* GPIO189: LED */
#define IOMG_AO_011_REG			(0x02C)
/* GPIO190: LED */
#define IOMG_AO_012_REG			(0x030)
/* GPIO202: type C enable. active low */
#define IOMG_AO_023_REG			(0x05C)
/* GPIO206: USB switch. active low */
#define IOMG_AO_026_REG			(0x068)
/* GPIO219: PD interrupt. pull up */
#define IOMG_AO_039_REG			(0x09C)

#define IOCG_AO_REG_BASE		0xFFF1187C
/* GPIO219: PD interrupt. pull up */
#define IOCG_AO_043_REG			(0x030)

#endif  /* __HI3660_H__ */
